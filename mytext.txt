DECLARE
    -- Cursor to get employee details
    CURSOR emp_cursor IS
        SELECT e.employee_id, e.name, e.salary, e.department_id,
               (SELECT COUNT(*) 
                FROM departments d 
                WHERE d.department_id = e.department_id) AS dept_exists
        FROM employees e;

    -- Variables to hold each record
    v_employee_id employees.employee_id%TYPE;
    v_name employees.name%TYPE;
    v_salary employees.salary%TYPE;
    v_department_id employees.department_id%TYPE;
    v_dept_exists NUMBER;
    v_bonus NUMBER;

    -- Custom exception for no valid department
    no_department EXCEPTION;

BEGIN
    OPEN emp_cursor;

    LOOP
        FETCH emp_cursor INTO v_employee_id, v_name, v_salary, v_department_id, v_dept_exists;

        EXIT WHEN emp_cursor%NOTFOUND;

        -- Check if department does not exist (outer join simulation)
        IF v_dept_exists = 0 THEN
            RAISE no_department;
        END IF;

        -- Bonus Calculation
        IF v_salary > 50000 THEN
            v_bonus := v_salary * 0.20;
        ELSIF v_department_id = 10 THEN
            v_bonus := v_salary * 0.05;
        ELSE
            v_bonus := 0;  -- No bonus if none of the conditions match
        END IF;

        -- Output the result
        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || v_employee_id || 
                             ', Name: ' || v_name || 
                             ', Bonus: ' || v_bonus);

    END LOOP;

    CLOSE emp_cursor;

EXCEPTION
    WHEN no_department THEN
        DBMS_OUTPUT.PUT_LINE('Error: Employee ' || v_employee_id || 
                             ' has no valid department (Department ID: ' || v_department_id || ').');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected Error: ' || SQLERRM);
        CLOSE emp_cursor;
END;
/
